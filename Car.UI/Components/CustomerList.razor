@using Car.Shared
@using Car.UI.Services
@inject ICustomerService CustomerService

@if (EnableSearch)
{
    <div class="form-group row mb-3">
        <label class="col-auto col-form-label">Search: <span class="text-danger" /></label>
        <div class="col">
            <input class="form-control" @bind:event="oninput" @bind="Filter" />
        </div>
    </div>
}
<div class="table-responsive">
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th scope="col" width="1%">#</th>
                <th scope="col" class="col-3">Name</th>
                <th scope="col" class="col-3">Address</th>
                <th scope="col" class="col-3">Email</th>
                <th scope="col" width="1%"></th>
            </tr>
        </thead>
        <tbody>
            @{
                int i = 1;
            }
            @foreach (var customer in Customers)
            {
                if (!FilterMatches(customer))
                    continue;
                <tr>
                    <td scope="row">@i</td>
                    <td>@customer.Properties.Name</td>
                    <td>@customer.Properties.Address</td>
                    <td>@customer.Properties.Email</td>
                    <td>@CustomerSelectedButton(customer)</td>
                </tr>
                i++;
            }
        </tbody>
    </table>
</div>


@code {
    [Parameter]
    public IList<CustomerGetUpdateDTO> Customers { get; set; }

    [Parameter]
    public bool EnableSearch { get; set; }

    [Parameter]
    public RenderFragment<CustomerGetUpdateDTO> CustomerSelectedButton { get; set; }

    public string? Filter { get; set; }

    private bool FilterMatches(CustomerGetUpdateDTO customer)
    {
        if (string.IsNullOrWhiteSpace(Filter))
            return true;

        string f = Filter.Trim();
        return customer.Id.ToString().Contains(f, StringComparison.OrdinalIgnoreCase)
            || customer.Properties.Name.Contains(f, StringComparison.OrdinalIgnoreCase)
            || customer.Properties.Address.Contains(f, StringComparison.OrdinalIgnoreCase)
            || customer.Properties.Email.Contains(f, StringComparison.OrdinalIgnoreCase);
    }
}
